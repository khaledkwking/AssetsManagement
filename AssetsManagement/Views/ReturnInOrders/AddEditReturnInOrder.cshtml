@*@using  MultipleModelInOneView;*@

@model BOL.ReturnInOrdersViewModel

@using PagedList.Mvc;
@using PagedList;

@{ //ViewBag.Title = @Html.Raw(Resources.DefaultResource.Rooms);
    Layout = "~/Views/Shared/_Layout.cshtml"; }

@*<h2>CarList</h2>

    <p>
        @Html.ActionLink("Create New", "Create")
    </p>*@



<div class="kt-subheader   kt-grid__item" id="kt_subheader">
    <div class="kt-subheader__main">
        <h3 class="kt-subheader__title">
            @Html.Raw(Resources.DefaultResource.YOUAREHERE):

        </h3>
        <span class="kt-subheader__separator kt-hidden"></span>
        <div class="kt-subheader__breadcrumbs">

            <a href="#" class="kt-subheader__breadcrumbs-home"><i class="flaticon2-shelter"></i></a>
            <span class="kt-subheader__breadcrumbs-separator"></span>

            <a href="/Home/Index" class="kt-subheader__breadcrumbs-link">
                @Html.Raw(Resources.DefaultResource.Dashboard)
            </a>


            @*@if (@ViewBag.EmpId != null)
                            {
                <span class="kt-subheader__breadcrumbs-separator"></span>
                                <a href='@Url.Action("Employees", "HR", new { EmpId = @ViewBag.EmpId })' class="kt-subheader__breadcrumbs-link">
                                    @Html.Raw(ViewBag.EmpName as string)
                                </a>
                                }*@

        </div>
    </div>
</div>
@using (Html.BeginForm("AddEditReturnInOrder", "ReturnInOrders", FormMethod.Post, htmlAttributes: new { id = "myform", name = "myform" }))
{
@Html.AntiForgeryToken();
<div class="kt-content  kt-grid__item kt-grid__item--fluid" id="kt_content">
    @* First source items *@
    <div class="row">

        <div class="col-6">
            <div class="kt-portlet kt-portlet--mobile">
                <div class="kt-portlet__head kt-portlet__head--lg">
                    <div class="kt-portlet__head-label">
                        <span class="kt-portlet__head-icon">
                            <i class="kt-font-brand flaticon2-checking"></i>
                        </span>
                        <h3 class="kt-portlet__head-title">
                            @Html.Raw(Resources.DefaultResource.ReturnInOrdersTitle)

                        </h3>

                    </div>
                    <div class="kt-portlet__head-toolbar">
                        <div class="kt-portlet__head-wrapper">
                            <div class="kt-portlet__head-actions">

                                <button type="button" class="btn btn-brand btn-elevate btn-icon-sm" id="Addbtn"
                                        @*new { InOrderId = @Request.QueryString["InOrderId"].ToString()}*@
                                        onclick="location.href='@Url.Action("AddEditReturnInOrder", "ReturnInOrders",new { InOrderId=Model.SelectedItem.InOrderId})'">

                                    <i class="la la-plus"></i>
                                    <span class="kt-nav__link-text">
                                        @Html.Raw(Resources.DefaultResource.NewRecord)
                                    </span>
                                </button>
                                &nbsp;
                                <button name="CmdSave" type="submit" id="CmdSave" value="CmdSave" class="btn btn-success" formmethod="post" ValidationGroup="DML">
                                    <i class="fa-floppy-disk"></i>
                                    <span class="kt-nav__link-text">
                                        @Html.Raw(Resources.DefaultResource.Save)
                                    </span>
                                </button>
                                @*<input id="CmdSave" value="@Html.Raw(Resources.DefaultResource.Save )" name="CmdSave" type="submit" onclick="OnSubmit()" class="btn btn-success" title="@Html.Raw(Resources.DefaultResource.TransferAsset)" data-toggle="@Html.Raw(Resources.DefaultResource.TransferAsset)" formaction="/Inventory/AssetItemsList" formmethod="post" ValidationGroup="DML" />*@
                            </div>
                        </div>

                    </div>

                </div>
                <div class="kt-portlet__body">
                    @Html.HiddenFor(m => m.DisplayMode, new { @class = "form-control hidden", id = "DisplayMode", name = "DisplayMode" })

                    @Html.HiddenFor(m => m.PostFlag, new { @class = "hidden", id = "PostFlag", name = "PostFlag" })

                    @Html.HiddenFor(m => m.SelectedItem.InOrderId)
                    @Html.HiddenFor(m => m.SelectedItem.ReturnOrderId)
                    @*<form method="post" id="ReturnEvent">*@
                    @*@Html.RadioButton("A1", "1", ViewData["IsSelected"] == "1", new { onclick = "document.getElementById('ReturnEvent').submit();" })*@
                    @*</form>*@
                    <div class="table-responsive" style="min-height:800px">
                        @*start of part of drowdawn lists*@
                        <div id="dropDownListdiv">

                            <br />
                            <div class="form-group row ">

                                @Html.Label("lblReturnOrderId", Resources.DefaultResource.VoucherNum, new { @class = "col-lg-2 col-form-label HeadMenuItem ", Name = "lblReturnInOrder" })
                                <div class="col-lg-4">
                                    @Html.TextBoxFor(m => m.SelectedItem.ReturnOrderId, new { @class = "form-control", @readonly = "true" })
                                </div>


                            </div>

                            <div class="form-group row ">
                                @Html.Label("lblReturnOrderDate", Resources.DefaultResource.VoucherDate, new { @class = "col-lg-2 col-form-label HeadMenuItem", Name = "lblReturnOrderDate" })

                                <div class="col-lg-4">

                                    @{ string ExpiredDate = "";
                                        if (Model.SelectedItem.ReturnOrderDate == null)
                                        {
                                            //ExpiredDate =;
                                        }
                                        else
                                        {
                                            ExpiredDate = Model.SelectedItem.ReturnOrderDate.Value.ToString("dd/MM/yyyy");
                                        } }
                                    <input type="text" data-val="true" data-val-required="The Reason field is required." id="SelectedItem_ReturnOrderDate" name="SelectedItem.ReturnOrderDate" value="@ExpiredDate" class="form-control date-picker" AutoComplete="Off" data-date-format="dd/mm/yyyy" required />
                                    @Html.ValidationMessageFor(m => m.SelectedItem.ReturnOrderDate, Resources.DefaultResource.RequiredMessage, new { @class = "text-danger" })
                                </div>
                            </div>



                            <div class="form-group row">

                                @Html.Label("DestoryNotes", Resources.DefaultResource.Notes, new { @class = "col-2 col-form-label HeadMenuItem ", Name = "lblInOrder" })
                                <div class="col-10">
                                    @Html.TextAreaFor(m => m.SelectedItem.Remarks, 3, 55, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.SelectedItem.Remarks, Resources.DefaultResource.RequiredMessage, new { @class = "text-danger" })
                                </div>
                            </div>

                            @*End of dropdown lists*@

                            <div id="DivMsg" class="ErrorMsglbl" runat="server">
                                @*check message error or warning*@
                                @if (TempData["Message"] != null)
                                {
                <div class="alert alert-success alert-dismissable" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">
                    </button>
                    @Html.Raw(Resources.DefaultResource.SaveMessage)
                </div>}
                                @if (TempData["warningMessage"] != null)
                                {
                <div class="alert alert-warning alert-dismissable" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">
                    </button>

                    @TempData["warningMessage"]

                </div>}

                            </div>
                            @if (Model != null)
                            {
            <table id="showtable" class="table table-striped table-bordered table-hover table-checkable">
                <thead class="thead-dark">
                    <tr>
                        <th>
                            @*@Html.Raw(Resources.DefaultResource.CarNo)*@
                            @Html.ActionLink(Resources.DefaultResource.No, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                        </th>


                        <th>
                            @*@Html.Raw(Resources.DefaultResource.CarNo)*@
                            @Html.ActionLink(Resources.DefaultResource.ID, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                        </th>


                        <th>
                            @Html.ActionLink(Resources.DefaultResource.TitleAr, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingModel, Filter_Value = ViewBag.FilterValue })
                            @*@Html.Raw(Resources.DefaultResource.CarModel)*@
                        </th>
                        <th>

                            @Html.ActionLink(Resources.DefaultResource.RFID, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                        </th>


                        <th>

                            @Html.ActionLink(Resources.DefaultResource.RequiredQty, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                        </th>

                        <th>

                            @Html.ActionLink(Resources.DefaultResource.CurrentReturnQuantity, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                        </th>
                        <th>

                            @Html.ActionLink(Resources.DefaultResource.ReturnStoreItemQty, "AddEditOutOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                        </th>
                        <th>

                            @Html.ActionLink(Resources.DefaultResource.Quantity, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                        </th>

                        <th width="10%">
                            @Html.Raw(Resources.DefaultResource.Actions)
                        </th>


                    </tr>
                </thead>

                @*@foreach (var item in Model.ReturnInOrdersDetails)*@
                @{ int sno = 0; }
                @for (int i = 0; i < Model.ReturnInOrdersDetails.Count; i++)
                {@*@for (int i = 0; i < Model.SelectedItem.ReturnInOrdersDetials.Count; i++)*@

            <tr style="color:@(Model.ReturnInOrdersDetails[i].StockId == 0 ? "red" : "")">
                @Html.HiddenFor(modelItem => Model.ReturnInOrdersDetails[i].ReturnOrderDetId)
                @Html.HiddenFor(modelItem => Model.ReturnInOrdersDetails[i].StockId)
                @Html.HiddenFor(modelItem => Model.ReturnInOrdersDetails[i].StoreId)
                @Html.HiddenFor(modelItem => Model.ReturnInOrdersDetails[i].InOrderDetId)
                @Html.HiddenFor(modelItem => Model.ReturnInOrdersDetails[i].StockDetId)
                <td>
                    @{ sno++; }
                    @sno

                </td>

                <td>
                    @Html.DisplayFor(modelItem => Model.ReturnInOrdersDetails[i].StockId)
                    @Html.HiddenFor(modelItem => Model.ReturnInOrdersDetails[i].StockId)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => Model.ReturnInOrdersDetails[i].InOrdersDetails.tbl_ItemsStock.Item_tbl.Item_Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.ReturnInOrdersDetails[i].InOrdersDetails.Item_RFID)
                    @Html.HiddenFor(modelItem => Model.ReturnInOrdersDetails[i].InOrdersDetails.Item_RFID)
                </td>

                @*<td>
         @Html.DisplayFor(modelItem => item.Item_RFID)
        </td>*@
                <td>


                    @(Model.ReturnInOrdersDetails[i].InOrdersDetails.tbl_ItemsStock.Item_tbl.CountableFlag ?
                                       @Html.TextBoxFor(modelItem => Model.ReturnInOrdersDetails[i].Qty, new { @class = "form-control" })
                                       : @Html.TextBoxFor(modelItem => Model.ReturnInOrdersDetails[i].Qty, new { @class = "form-control" ,@disabled = "disabled" })
                                     )
                    @*<input name="Field"  value="@Model.ReturnInOrdersDetails[i].Qty" tabindex="0"  @(Model.ReturnInOrdersDetails[i].Item_tbl.CountableFlag ? "disabled=\"disabled\"" : "")>*@
                </td>

                <td>
                    @Html.DisplayFor(modelItem => Model.ReturnInOrdersDetails[i].InStoreQty)
                    @Html.HiddenFor(modelItem => Model.ReturnInOrdersDetails[i].InStoreQty)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.ReturnInOrdersDetails[i].InStoreItemQty)
                    @Html.HiddenFor(modelItem => Model.ReturnInOrdersDetails[i].InStoreItemQty)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.ReturnInOrdersDetails[i].InOrdersDetails.tbl_ItemsStock.ItemQty)

                </td>
                <td width="10%">
                    <button id="CmdDel" name="CmdDel" type="submit" value="CmdDel" data-toggle="kt-tooltip" title=" @Html.Raw(Resources.DefaultResource.Delete)" class="btn btn-outline-danger btn-sm btn-icon"
                            formaction="/ReturnInOrders/AddEditReturnInOrder/@i" formmethod="post" onclick="return confirm('@Html.Raw(Resources.DefaultResource.DelMessage)');">
                        <i class="la la-close"></i>
                    </button>
                </td>
            </tr>
}
            </table> @*<div class="paginationCust pagedList">

                    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

                    @Html.PagedListPager((PagedList.IPagedList)Model.SelectedItem.ReturnInOrdersDetials, Page_No => Url.Action("AddEditReturnInOrder", new { Page_No, Sorting_Order = ViewBag.CurrentSortOrder, Filter_Value = ViewBag.FilterValue })
                             , PagedListRenderOptions.ClassicPlusFirstAndLast)
                </div>*@}


                        </div>


                    </div>
                </div>
            </div>
        </div>
        @* End of First Source items *@
        @* second target items *@


        <div class="col-6">
            <div class="kt-portlet kt-portlet--mobile">
                <div class="kt-portlet__head kt-portlet__head--lg">
                    <div class="kt-portlet__head-label">
                        <span class="kt-portlet__head-icon">
                            <i class="kt-font-brand flaticon2-checking"></i>
                        </span>
                        <h3 class="kt-portlet__head-title">
                            @Html.Raw(Resources.DefaultResource.InOrderTitle)

                        </h3>

                    </div>
                    <div class="kt-portlet__head-toolbar">
                        <div class="kt-portlet__head-wrapper">
                            <div class="kt-portlet__head-actions">

                                <!--<button name="CmdScan" type="submit" value="Scan" class="btn btn-success btn-primary btn-icon-sm" id="Scanbtn" formmethod="post" ValidationGroup="DML">-->
                                @*onclick="location.href='@Url.Action("AddEditItemStock", "Inventory")'"*@
                                <!--<i class="la la-crosshairs"></i>
                                    <span class="kt-nav__link-text">
                                        @Html.Raw(Resources.DefaultResource.ScanReader)
                                    </span>
                                </button>-->

                                <button name="CmdAdd" type="submit" value="AddItem" class="btn btn-info btn-primary btn-icon-sm" id="Addbtn" formmethod="post" ValidationGroup="DML">
                                    @*onclick="location.href='@Url.Action("AddEditItemStock", "Inventory")'"*@
                                    <i class="la la-crosshairs"></i>
                                    <span class="kt-nav__link-text">
                                        @Html.Raw(Resources.DefaultResource.AddItemTitle)
                                    </span>
                                </button>
                                @*<input id="CmdSave" value="@Html.Raw(Resources.DefaultResource.Save )" name="CmdSave" type="submit" onclick="OnSubmit()" class="btn btn-success" title="@Html.Raw(Resources.DefaultResource.TransferAsset)" data-toggle="@Html.Raw(Resources.DefaultResource.TransferAsset)" formaction="/Inventory/AssetItemsList" formmethod="post" ValidationGroup="DML" />*@
                            </div>
                        </div>

                    </div>

                </div>
                <div class="kt-portlet__body">

                    <div id="DivMsg" class="ErrorMsglbl" runat="server">
                        @*check message error or warning*@
                        @if (TempData["ScannerMessage"] != null)
                        {
        <div class="alert alert-warning alert-dismissable" role="alert">
            @TempData["ScannerMessage"]
        </div>}
                    </div>
                    <div class="table-responsive" style="min-height: 800px;" id="Scannerdiv">
                        <div id="ChooseListdiv">
                            <div class="form-group row">
                                @Html.Label("", Resources.DefaultResource.InOrderNo, htmlAttributes: new { @class = "col-lg-2 col-form-label HeadMenuItem" })

                                <div class="col-lg-4">
                                    @Html.Label("InOrderId", Model.SelectedItem.InOrderId.ToString(), new { @class = "col-form-label HeadMenuItem", @readonly = "true" })
                                </div>


                                @Html.Label("lblReturnOrderDate", Resources.DefaultResource.VoucherDate, new { @class = "col-lg-2 col-form-label HeadMenuItem", Name = "lblReturnOrderDate" })

                                <div class="col-lg-4">

                                    @Html.Label("InOrderDate", Model.SelectedItem.InOrders.InOrderDate.Value.ToString("dd/MM/yyyy"), new { @class = "col-form-label HeadMenuItem", @readonly = "true" })


                                </div>

                            </div>
                            <div class="form-group row">
                                @Html.Label("", Resources.DefaultResource.SupplierName, htmlAttributes: new { @class = "col-lg-2 col-form-label HeadMenuItem" })

                                <div class="col-lg-4">
                                    @Html.Label("lblempName", Model.SelectedItem.InOrders.Suppliers_tbl .Sup_Name , new { @class = "col-form-label HeadMenuItem", @readonly = "true" })
                                </div>


                                @Html.Label("lblDeptName", Resources.DefaultResource.FromInventory, new { @class = "col-lg-2 col-form-label HeadMenuItem", Name = "lblReturnOrderDate" })

                                <div class="col-lg-4">

                                    @Html.Label("DeptName", Model.SelectedItem.InOrders.ToStore.Room_Name , new { @class = "col-form-label HeadMenuItem", @readonly = "true" })


                                </div>

                            </div>
                            @*<div class="form-group row">
                                @Html.Label("", Resources.DefaultResource.RoomName, htmlAttributes: new { @class = "col-lg-2 col-form-label HeadMenuItem" })

                                <div class="col-lg-4">
                                    @Html.Label("RoomName", Model.SelectedItem.InOrders.Room_tbl.Room_Name, new { @class = "col-form-label HeadMenuItem", @readonly = "true" })
                                </div>

                                @Html.Label("", Resources.DefaultResource.InventoryName, htmlAttributes: new { @class = "col-lg-2 col-form-label HeadMenuItem" })

                                <div class="col-lg-4">
                                    @Html.Label("StoreName", Model.SelectedItem.InOrders.Room_tbl1.Room_Name, new { @class = "col-form-label HeadMenuItem", @readonly = "true" })
                                </div>



                            </div>*@
                        </div>



                        @*<div class="table-responsive" style="height:800px; display:@(Model.ReaderType == 1 ? "normal" : "none")" id="Scannerdiv">*@

                        @if (Model != null)
                        {
        <table id="showtable" class="table table-striped table-bordered table-hover table-checkable">
            <thead class="thead-dark">
                <tr>
                    <th>
                        @*@Html.Raw(Resources.DefaultResource.CarNo)*@
                        @Html.ActionLink(Resources.DefaultResource.ID, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                    </th>


                    <th>
                        @Html.ActionLink(Resources.DefaultResource.TitleAr, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingModel, Filter_Value = ViewBag.FilterValue })
                        @*@Html.Raw(Resources.DefaultResource.CarModel)*@
                    </th>
                    <th>

                        @Html.ActionLink(Resources.DefaultResource.RFID, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                    </th>
                    <th>

                        @Html.ActionLink(Resources.DefaultResource.SerialOrBarcode, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                    </th>


                    <th>

                        @Html.ActionLink(Resources.DefaultResource.CountableTitle, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                    </th>


                    <th>

                        @Html.ActionLink(Resources.DefaultResource.InQty, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                    </th>
                    <th>

                        @Html.ActionLink(Resources.DefaultResource.Quantity, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                    </th>
                    <th>

                        @Html.ActionLink(Resources.DefaultResource.CurrentItemQuantity, "AddEditReturnInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                    </th>
                    <th>

                        @Html.ActionLink(Resources.DefaultResource.ItemStatus, "AddEditInOrder", new { Sorting_Order = ViewBag.SortingName, Filter_Value = ViewBag.FilterValue })
                    </th>
                    <th width="7%">
                        @Html.Raw(Resources.DefaultResource.Actions)
                    </th>


                </tr>
            </thead>


            @*@foreach (var item in Model.ItemsStock)*@
            @if (Model.SelectedItem.InOrders.InOrdersDetails != null)
            {
                int i = 0;
                foreach (var item in Model.SelectedItem.InOrders.InOrdersDetails)
                {

        <tr style="color:@(item.StockId == 0 ? "red" : "")">
            @*@Html.HiddenFor(modelItem => Model.SelectedItem.InOrders.InOrdersDetails[i].Room_Id)*@
            @*@Html.HiddenFor(modelItem => Model.ScanItems[i].StockId)*@


            <td>
                @Html.DisplayFor(modelItem => item.StockId)
                @Html.HiddenFor(modelItem => item.StockId)



                @*@Html.TextBoxFor(x => Model.ScanItems[i].StockId, new { @class = "form-control", @readonly = "readonly", @name = i })*@
                @*<input type="text" name="@Model.ScanItems[i].StockId" id="@Model.ScanItems[i].StockId" value="@Model.ScanItems[i].StockId" />*@
            </td>

            <td style="">
                @Html.DisplayFor(modelItem => item.tbl_ItemsStock.Item_tbl.Item_Name)
                @Html.HiddenFor(modelItem => item.ItemId)
            </td>
            @*<td style="display:@(item.Item_Id == 0 ? "normal" : "none")">
            @Html.DropDownListFor(modelItem => item.ItemId, Model.Items, Resources.DefaultResource.ListChoose, new { @class = "select-chosen" })

        </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.Item_RFID)
                @Html.HiddenFor(modelItem => item.Item_RFID)
                @*@Html.EditorFor(modelItem => Model.ScanItems[i].Item_RFID)*@
            </td>


            <td style="display:@(item.tbl_ItemsStock.Depart_Id == null ? "normal" : "none")">
                @Html.DisplayFor(modelItem => item.tbl_ItemsStock.Item_Serial)

            </td>
            <td style="display:@(item.tbl_ItemsStock.Depart_Id != null ? "normal" : "none")">
                @Html.DisplayFor(modelItem => item.Item_BarCode)

            </td>

            <td>
                @Html.DisplayFor(modelItem => item.tbl_ItemsStock.Item_tbl.CountableFlag)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Qty)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.tbl_ItemsStock.ItemQty)
                @Html.HiddenFor(modelItem => item.tbl_ItemsStock.ItemQty)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.ItemInStoreQty )
                @Html.HiddenFor(modelItem => item.ItemInStoreQty)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.tbl_ItemsStock.Status.AName)
            </td>
            <td width="7%">

                @Html.CheckBoxFor(modelItem => Model.ItemsScanCheckList[i].IsSelected)
                @Html.HiddenFor(modelItem => Model.ItemsScanCheckList[i].Name, new { @Value = Model.ItemsScanCheckList[i].Name })
                @Html.HiddenFor(modelItem => Model.ItemsScanCheckList[i].Id, new { @Value = Model.ItemsScanCheckList[i].Id })

            </td>
        </tr>i++;
                        }
                    }

        </table> @*<div class="paginationCust pagedList">

                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

                @Html.PagedListPager((PagedList.IPagedList)Model.ScanItems, Page_No => Url.Action("AddEditReturnInOrder", new { Page_No,  Sorting_Order = ViewBag.CurrentSortOrder, Filter_Value = ViewBag.FilterValue })
                    , PagedListRenderOptions.ClassicPlusFirstAndLast)
            </div>*@}

                    </div>
                </div>
            </div>
        </div>

        @* End of second target items *@

    </div>
</div>}
@*for Valiadtion*@

@*<script defer src="~/Scripts/jquery.min.js"></script>*@
@*<script defer src="~/Scripts/jquery.validate.min.js" type="text/javascript"></script>*@
@*<link href="~/assets/vendors/general/select2/dist/css/select2.min.css" rel="stylesheet" />
    <script defer src="~/assets/vendors/general/select2/dist/js/select2.min.js"></script>*@
<script defer src="~/Scripts/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>
@section scripts
    {
    <script type="text/javascript">



            @*$("#FromStoreId").val(@Model.FromStoreId).trigger('Return');*@
                  @*alert(@Model.FromDeptId);*@

            @*$("#SupplierId").val(@Model.SupplierId).trigger('Return');*@

            @*$("#ToStoreId").val(@Model.ToStoreId).trigger('Return');*@

            //alert(document.getElementsByName("OrganizedFlag").value);
            // Begin :: function when Return select From Part
                   $(function () {

                     $("#dropDownListdiv").on("Return", "select", function () {

                         var value = $(this).val();
                         var id = $(this).attr("id");

                         if (id != 'ActionType')
                         {
                             document.getElementById("DisplayMode").value = id;
                             const form = document.getElementById('myform');
                            /* form.action = "LoadData";*/
                             form.name = "submit";
                             form.value = "submit";
                             form.submit();

                         }

                       /*  setDropDrownList(string type, int value, int SearchType)*/

                     });
                   });

            $('input[type=radio][name=ReaderType]').Return(function () {

                    if (this.value == '1') {
                        //$("#Barcodediv").hide();
                        //$("#Scannerdiv").Show();
                        /*$('#Barcodediv').css('display', 'none');*/
                        document.myform.submit();
                    }
                    else if (this.value == '2') {

                        document.myform.submit();
                    }
            });


        //$('#myform').validate({
        //    ignore: []
        //});
        document.getElementById("Barcode").onkeydown = function (e)
        {

                const form = document.getElementById('myform');

                if (e.key === "Enter") {
                    form.name = "CmdBarcode";
                    form.value = "CmdBarcode";
                    document.getElementById("PostFlag").value = 3;
                    form.submit();

                }

            }


        //var form = $("#myform")
        //    .removeData("validator")
        //    .removeData("unobtrusiveValidation");

        //$.validator.unobtrusive.parse(form);


        //$(document).ready(function () {




            // INITIALIZE plugin

        /*  $(document).ready(function () {*/
       /* $('#myform').validate(); // <- INITIALIZE plugin*/
    /*  $('#myform').validate({  });*/



       /* $("select").attr('data-rule-chosen-required', true);*/
/*        $("select").attr('data-validation-engine', 'validate[required]');*/
        //$("select").attr('style', 'display:normal');

        //alert("rtertr");



        $(function () {
            $("#SelectedItem_StoreId_From").select2();
        });
       /* $(".select-chosen").chosen({ rtl: true }); */

    </script>
    @*Display message to user*@
    @if (TempData["ErroMessage"] != null)
    {
<script type="text/javascript">


                          alert('@TempData["ErroMessage"]');

</script>}
}


